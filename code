import tkinter as tk
from tkinter import filedialog, messagebox, Label, Button
import numpy as np
import pandas as pd
import cv2
import os
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM, TimeDistributed
from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

---------------------------------------------
GLOBAL VARIABLES
---------------------------------------------

img_size = 64
dataset_path = ""
model = None

---------------------------------------------
DATASET LOADING AND PREPROCESSING
---------------------------------------------

def load_dataset(path):
images = []
labels = []
classes = sorted(os.listdir(path))
print("Classes found:", classes)

for label_idx, class_name in enumerate(classes):
    class_path = os.path.join(path, class_name)
    if not os.path.isdir(class_path):
        continue
    for img_file in os.listdir(class_path):
        img_path = os.path.join(class_path, img_file)
        try:
            img = cv2.imread(img_path)
            img = cv2.resize(img, (img_size, img_size))
            images.append(img)
            labels.append(label_idx)
        except:
            continue

X = np.array(images) / 255.0
y = to_categorical(np.array(labels))
print(f"Loaded {len(X)} images from {len(classes)} classes.")
return X, y, classes

---------------------------------------------
MODEL DEFINITIONS
---------------------------------------------

def build_perceptron(input_shape, num_classes):
model = Sequential([
Flatten(input_shape=input_shape),
Dense(128, activation='relu'),
Dense(num_classes, activation='softmax')
])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
return model

def build_dnn(input_shape, num_classes):
model = Sequential([
Flatten(input_shape=input_shape),
Dense(512, activation='relu'),
Dropout(0.4),
Dense(256, activation='relu'),
Dropout(0.3),
Dense(num_classes, activation='softmax')
])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
return model

def build_cnn_lstm(input_shape, num_classes):
model = Sequential([
TimeDistributed(Conv2D(32, (3, 3), activation='relu'), input_shape=(1, *input_shape)),
TimeDistributed(MaxPooling2D((2, 2))),
TimeDistributed(Flatten()),
LSTM(64),
Dense(128, activation='relu'),
Dropout(0.3),
Dense(num_classes, activation='softmax')
])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
return model

---------------------------------------------
TRAIN MODEL FUNCTION
---------------------------------------------

def train_model(model_type):
global model, dataset_path
if dataset_path == "":
messagebox.showerror("Error", "Please select dataset folder first!")
return

X, y, classes = load_dataset(dataset_path)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

input_shape = X_train.shape[1:]
num_classes = y.shape[1]

if model_type == "Perceptron":
    model = build_perceptron(input_shape, num_classes)
elif model_type == "DNN":
    model = build_dnn(input_shape, num_classes)
elif model_type == "CNN-LSTM":
    model = build_cnn_lstm((img_size, img_size, 3), num_classes)

history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1)
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true = np.argmax(y_test, axis=1)

acc = accuracy_score(y_true, y_pred_classes)
print(f"Test Accuracy: {acc:.2f}")
messagebox.showinfo("Training Complete", f"{model_type} Model Accuracy: {acc*100:.2f}%")

# Save model
model.save(f"model/{model_type}_model.h5")

# Plot accuracy
plt.plot(history.history['accuracy'], label='Train')
plt.plot(history.history['val_accuracy'], label='Validation')
plt.legend()
plt.title(f'{model_type} Training Accuracy')
plt.show()

---------------------------------------------
PREDICT FUNCTION
---------------------------------------------

def predict_image():
global model
if model is None:
messagebox.showerror("Error", "No model loaded or trained!")
return

file_path = filedialog.askopenfilename()
if not file_path:
    return

img = load_img(file_path, target_size=(img_size, img_size))
img_array = img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

if isinstance(model.input_shape[1], tuple):  # For CNN-LSTM
    img_array = np.expand_dims(img_array, axis=1)

prediction = model.predict(img_array)
predicted_class = np.argmax(prediction)
messagebox.showinfo("Prediction", f"Predicted Class: {predicted_class}")

---------------------------------------------
GUI SECTION
---------------------------------------------

root = tk.Tk()
root.title("AI-Powered Tactical Intelligence")
root.geometry("600x400")
root.config(bg="#1c1c1c")

Label(root, text="AI-Powered Tactical Intelligence", fg="white", bg="#1c1c1c",
font=("Helvetica", 18, "bold")).pack(pady=20)

def select_dataset():
global dataset_path
dataset_path = filedialog.askdirectory()
if dataset_path:
messagebox.showinfo("Dataset Selected", f"Path: {dataset_path}")

Button(root, text="Select Dataset", command=select_dataset, width=20, bg="#007acc", fg="white").pack(pady=10)
Button(root, text="Train Perceptron Model", command=lambda: train_model("Perceptron"), width=25, bg="#28a745", fg="white").pack(pady=5)
Button(root, text="Train DNN Model", command=lambda: train_model("DNN"), width=25, bg="#17a2b8", fg="white").pack(pady=5)
Button(root, text="Train CNN-LSTM Model", command=lambda: train_model("CNN-LSTM"), width=25, bg="#ffc107", fg="black").pack(pady=5)
Button(root, text="Predict Image", command=predict_image, width=25, bg="#6f42c1", fg="white").pack(pady=10)
Button(root, text="Exit", command=root.quit, width=15, bg="red", fg="white").pack(pady=10)

root.mainloop()
